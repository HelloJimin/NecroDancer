if (KEYMANAGER->isToggleKey(VK_TAB)) _isDebug = true;
	if (!KEYMANAGER->isToggleKey(VK_TAB)) _isDebug = false;
	
	//if (KEYMANAGER->isToggleKey(VK_TAB))
	if (!_isDebug) return;
	{
		int p = PLAYER->currentTile();
		vector<int> monTile;
		for (int i = 0; i < MONSTERMANAGER->getMonster().size(); i++)
		{
			monTile.push_back(MONSTERMANAGER->getMonster()[i]->currentTile());
		}
		HBRUSH myBrush = (HBRUSH)CreateSolidBrush(RGB(0, 0, 0));
		HBRUSH oldBrush = (HBRUSH)SelectObject(getMemDC(), myBrush);
		for (int i = 0; i < TILEX; i++)
		{
			for (int k = 0; k < TILEY; k++)
			{
				if (CAMERAX - 100 < _tiles[(i*TILEX) + k].x && _tiles[(i*TILEX) + k].x < CAMERAX + WINSIZEX + 100 && CAMERAY - 100 < _tiles[(i*TILEX) + k].y&& _tiles[(i*TILEX) + k].y < CAMERAY + WINSIZEY + 100)
				{
					if (_tiles[(i*TILEX) + k].terrain != TERRAIN_NONE)Rectangle(getMemDC(), _tiles[(i*TILEX) + k].rc.left, _tiles[(i*TILEX) + k].rc.top, _tiles[(i*TILEX) + k].rc.right, _tiles[(i*TILEX) + k].rc.bottom);

					 myBrush = (HBRUSH)CreateSolidBrush(RGB(255, 150, 150));
					 oldBrush = (HBRUSH)SelectObject(getMemDC(), myBrush);
					if (_tiles[(i*TILEX) + k].item != NULL) Rectangle(getMemDC(), _tiles[(i*TILEX) + k].rc.left, _tiles[(i*TILEX) + k].rc.top, _tiles[(i*TILEX) + k].rc.right, _tiles[(i*TILEX) + k].rc.bottom);
					
					myBrush = (HBRUSH)CreateSolidBrush(RGB(255, 0, 0));
					oldBrush = (HBRUSH)SelectObject(getMemDC(), myBrush);

					if (_tiles[(i*TILEX) + k].obj != OBJ_NONE) Rectangle(getMemDC(), _tiles[(i*TILEX) + k].rc.left, _tiles[(i*TILEX) + k].rc.top, _tiles[(i*TILEX) + k].rc.right, _tiles[(i*TILEX) + k].rc.bottom);
					
					SelectObject(getMemDC(), oldBrush);
					DeleteObject(myBrush);
				}
			}

			for (int k = 0; k < monTile.size(); k++)
			{
				if ((i*TILEX) < monTile[k] && monTile[k] < ((i + 1)*TILEX))
				{
					 myBrush = (HBRUSH)CreateSolidBrush(RGB(208, 84, 255));
					 oldBrush = (HBRUSH)SelectObject(getMemDC(), myBrush);
					Rectangle(getMemDC(), MONSTERMANAGER->getMonster()[k]->getRc().left, MONSTERMANAGER->getMonster()[k]->getRc().top, MONSTERMANAGER->getMonster()[k]->getRc().right, MONSTERMANAGER->getMonster()[k]->getRc().bottom);

				}
			}
			if ((i*TILEX) < p  && p < ((i + 1)*TILEX))
			{
				 myBrush = (HBRUSH)CreateSolidBrush(RGB(108, 215, 255));
				 oldBrush = (HBRUSH)SelectObject(getMemDC(), myBrush);
				Rectangle(getMemDC(), PLAYER->getCollisionRc().left, PLAYER->getCollisionRc().top, PLAYER->getCollisionRc().right, PLAYER->getCollisionRc().bottom);
			}
		}
		SelectObject(getMemDC(), oldBrush);
		DeleteObject(myBrush);
		for (int i = 0; i < TILEX * TILEY; i++)
		{
			if (CAMERAX - 100 < _tiles[i].x && _tiles[i].x < CAMERAX + WINSIZEX + 100 && CAMERAY - 100 < _tiles[i].y&& _tiles[i].y < CAMERAY + WINSIZEY + 100)
			{
				SetBkMode(getMemDC(), TRANSPARENT);
				//색상
				SetTextColor(getMemDC(), RGB(255, 0, 0));

				char str[128];
				sprintf_s(str, "%d", i);
				TextOut(getMemDC(), _tiles[i].rc.left, _tiles[i].rc.top, str, strlen(str));
			}
		}

	}